GAS LISTING /tmp/ccPWMp4V.s 			page 1


   1               		.file	"bjarne.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.stabs	"/home/nullacid/Documents/gitwork/grupp2robot/src/system/",100,0,2,.Ltext0
   9               		.stabs	"bjarne.c",100,0,2,.Ltext0
  10               		.text
  11               	.Ltext0:
  12               		.stabs	"gcc2_compiled.",60,0,0,0
  13               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  14               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  15               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  16               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  17               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  18               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  19               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  21               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  22               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  23               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  24               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  28               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  29               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  30               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  31               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  32               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  33               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  34               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  35               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  36               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  37               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  38               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  42               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  43               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  44               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  45               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  47               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  48               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  49               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  51               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  52               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  53               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
GAS LISTING /tmp/ccPWMp4V.s 			page 2


  58               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
  59               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  60               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  61               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  62               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  63               		.stabs	"/usr/lib/gcc/avr/4.8.2/include/stdint.h",130,0,0,0
  64               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  65               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  66               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  67               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  68               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  69               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  70               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  71               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  72               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  73               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  74               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  75               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  76               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  77               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  78               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  79               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  80               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  81               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  82               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  83               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  84               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  85               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  86               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  87               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  88               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  89               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  90               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  91               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  92               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  93               		.stabn	162,0,0,0
  94               		.stabn	162,0,0,0
  95               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  96               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  97               		.stabn	162,0,0,0
  98               		.stabn	162,0,0,0
  99               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
 100               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
 101               		.stabn	162,0,0,0
 102               		.stabn	162,0,0,0
 103               		.stabs	"decide_if_repeated:F(5,2)",36,0,87,decide_if_repeated
 104               		.stabs	"msg:P(5,2)",64,0,87,24
 105               	.global	decide_if_repeated
 106               		.type	decide_if_repeated, @function
 107               	decide_if_repeated:
 108               		.stabd	46,0,0
   1:bjarne.c      **** #include <avr/io.h>
   2:bjarne.c      **** #include <avr/interrupt.h>
   3:bjarne.c      **** #define F_CPU 20000000
   4:bjarne.c      **** #include <util/delay.h>
   5:bjarne.c      **** #include "lib/usart.h"
   6:bjarne.c      **** 
GAS LISTING /tmp/ccPWMp4V.s 			page 3


   7:bjarne.c      **** #define FORWARD 1
   8:bjarne.c      **** #define BACK 0
   9:bjarne.c      **** #define false 0
  10:bjarne.c      **** #define true 1
  11:bjarne.c      **** #define bool uint8_t
  12:bjarne.c      **** 
  13:bjarne.c      **** void setSpeed(uint8_t lspeed, uint8_t rspeed, uint8_t ldir, uint8_t rdir);
  14:bjarne.c      **** void init_motors();
  15:bjarne.c      **** void handle_messages();
  16:bjarne.c      **** uint8_t decide_if_repeated(uint8_t msg);
  17:bjarne.c      **** void update_sensor_data(); 
  18:bjarne.c      **** 
  19:bjarne.c      **** uint8_t dir_left = 1; //0 or 1 = back or forward
  20:bjarne.c      **** uint8_t dir_right = 1;
  21:bjarne.c      **** uint8_t spd_left = 0; //0 to 100 = procent of full speed
  22:bjarne.c      **** uint8_t spd_right = 0;
  23:bjarne.c      **** uint8_t button_autonom = 0; // 0 om manuellt läge, 1 om autonomt läge
  24:bjarne.c      **** uint8_t message = 1;
  25:bjarne.c      **** uint8_t activeDirs = 0;
  26:bjarne.c      **** bool new_message = false;
  27:bjarne.c      **** 
  28:bjarne.c      **** 
  29:bjarne.c      **** 
  30:bjarne.c      **** //-----SENSOR DB------------
  31:bjarne.c      **** 
  32:bjarne.c      **** //	sensor/token_sensor_fram/bak/vänster/höger upper/lower
  33:bjarne.c      **** 
  34:bjarne.c      **** uint8_t s_LIDAR_u = 0;
  35:bjarne.c      **** uint8_t s_LIDAR_l = 0;
  36:bjarne.c      **** uint8_t t_LIDAR = 0;
  37:bjarne.c      **** 
  38:bjarne.c      **** uint8_t s_ir_h_f = 0;
  39:bjarne.c      **** uint8_t s_ir_h_b = 0;
  40:bjarne.c      **** uint8_t s_ir_v_f = 0;
  41:bjarne.c      **** uint8_t s_ir_v_b = 0;
  42:bjarne.c      **** 
  43:bjarne.c      **** //	Token parallell vänster/höger
  44:bjarne.c      **** 
  45:bjarne.c      **** uint8_t t_p_h = 0;
  46:bjarne.c      **** uint8_t t_p_v = 0;
  47:bjarne.c      **** 
  48:bjarne.c      **** uint8_t t_vagg_h_f = 0;
  49:bjarne.c      **** uint8_t t_vagg_h_b = 0;
  50:bjarne.c      **** uint8_t t_vagg_v_f = 0;
  51:bjarne.c      **** uint8_t t_vagg_v_b = 0;
  52:bjarne.c      **** 
  53:bjarne.c      **** uint8_t s_gyro_u = 0;
  54:bjarne.c      **** uint8_t s_gyro_l = 0;
  55:bjarne.c      **** uint8_t t_gyro = 0;
  56:bjarne.c      **** 
  57:bjarne.c      **** uint8_t s_reflex = 0;
  58:bjarne.c      **** uint8_t t_reflex_u = 0;
  59:bjarne.c      **** uint8_t t_reflex_l = 0;
  60:bjarne.c      **** //----------------------------
  61:bjarne.c      **** 
  62:bjarne.c      **** int main(){
  63:bjarne.c      **** 	
GAS LISTING /tmp/ccPWMp4V.s 			page 4


  64:bjarne.c      **** 	init_USART_up();
  65:bjarne.c      **** 	init_USART_down();
  66:bjarne.c      **** 	init_motors();
  67:bjarne.c      **** 	
  68:bjarne.c      **** 	while(1){
  69:bjarne.c      **** 		
  70:bjarne.c      **** 		handle_messages();
  71:bjarne.c      **** 		update_sensor_data();
  72:bjarne.c      **** 
  73:bjarne.c      **** 		if (button_autonom == 1){
  74:bjarne.c      **** 			
  75:bjarne.c      **** 			//tolka sensordata
  76:bjarne.c      **** 			//reagera på sensordata
  77:bjarne.c      **** 			
  78:bjarne.c      **** 		}
  79:bjarne.c      **** 		
  80:bjarne.c      **** 		
  81:bjarne.c      **** 	
  82:bjarne.c      **** 	
  83:bjarne.c      **** 		//setSpeed(50,100,FORWARD,BACK);
  84:bjarne.c      **** 	}
  85:bjarne.c      **** }
  86:bjarne.c      **** 
  87:bjarne.c      **** uint8_t decide_if_repeated(uint8_t msg){
 109               		.stabn	68,0,87,.LM0-.LFBB1
 110               	.LM0:
 111               	.LFBB1:
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
  88:bjarne.c      **** 	
  89:bjarne.c      **** 	bool answer = false;
  90:bjarne.c      **** 
  91:bjarne.c      **** 	switch(msg){
 116               		.stabn	68,0,91,.LM1-.LFBB1
 117               	.LM1:
 118 0000 90E0      		ldi r25,0
 119 0002 8830      		cpi r24,8
 120 0004 9105      		cpc r25,__zero_reg__
 121 0006 00F4      		brsh .L20
 122 0008 FC01      		movw r30,r24
 123 000a E050      		subi r30,lo8(-(gs(.L4)))
 124 000c F040      		sbci r31,hi8(-(gs(.L4)))
 125 000e 2091 0000 		lds r18,activeDirs
  92:bjarne.c      **** 		case (0): //pil UPP trycks ner	
  93:bjarne.c      **** 			answer = activeDirs	&& 1; // 1 om kommandot är repeatat annars 0
  94:bjarne.c      **** 			activeDirs = activeDirs || 1;
  95:bjarne.c      **** 		break;
  96:bjarne.c      **** 		case(1): //pil UPP släpps		
  97:bjarne.c      **** 			answer = false;
  98:bjarne.c      **** 			activeDirs = activeDirs && 254;
  99:bjarne.c      **** 		break;
 100:bjarne.c      **** 		case(2): //pil VÄNSTER trycks ner
 101:bjarne.c      **** 			answer = activeDirs	&& 4; // 1 om kommandot är repeatat annars 0
 102:bjarne.c      **** 			activeDirs = activeDirs || 4;
 103:bjarne.c      **** 		break;
GAS LISTING /tmp/ccPWMp4V.s 			page 5


 104:bjarne.c      **** 		case(3): //pil VÄNSTER släpps
 105:bjarne.c      **** 			answer = false;
 106:bjarne.c      **** 			activeDirs = activeDirs && 251;
 107:bjarne.c      **** 		break;
 108:bjarne.c      **** 		case (4): //pil NER trycks ner	
 109:bjarne.c      **** 			answer = activeDirs	&& 2; // 1 om kommandot är repeatat annars 0
 110:bjarne.c      **** 			activeDirs = activeDirs || 2;
 111:bjarne.c      **** 		break;
 112:bjarne.c      **** 		case(5): //pil NER släpps
 113:bjarne.c      **** 			answer = false;
 114:bjarne.c      **** 			activeDirs = activeDirs && 253;
 115:bjarne.c      **** 		break;
 116:bjarne.c      **** 		case(6): //pil HÖGER trycks ner
 117:bjarne.c      **** 			answer = activeDirs	&& 8; // 1 om kommandot är repeatat annars 0
 118:bjarne.c      **** 			activeDirs = activeDirs || 8;
 119:bjarne.c      **** 		break;
 120:bjarne.c      **** 		case(7): //pil HÖGER släpps
 121:bjarne.c      **** 			answer = false;
 122:bjarne.c      **** 			activeDirs = activeDirs && 247;
 126               		.stabn	68,0,122,.LM2-.LFBB1
 127               	.LM2:
 128 0012 81E0      		ldi r24,lo8(1)
  91:bjarne.c      **** 	switch(msg){
 129               		.stabn	68,0,91,.LM3-.LFBB1
 130               	.LM3:
 131 0014 0C94 0000 		jmp __tablejump2__
 132               		.section	.progmem.gcc_sw_table,"a",@progbits
 133               		.p2align	1
 134               	.L4:
 135 0000 0000      		.word gs(.L10)
 136 0002 0000      		.word gs(.L11)
 137 0004 0000      		.word gs(.L10)
 138 0006 0000      		.word gs(.L11)
 139 0008 0000      		.word gs(.L10)
 140 000a 0000      		.word gs(.L11)
 141 000c 0000      		.word gs(.L10)
 142 000e 0000      		.word gs(.L11)
 143               		.text
 144               	.L10:
 117:bjarne.c      **** 			answer = activeDirs	&& 8; // 1 om kommandot är repeatat annars 0
 145               		.stabn	68,0,117,.LM4-.LFBB1
 146               	.LM4:
 147 0018 2111      		cpse r18,__zero_reg__
 148 001a 00C0      		rjmp .L18
 149 001c 80E0      		ldi r24,0
 150               	.L18:
 118:bjarne.c      **** 			activeDirs = activeDirs || 8;
 151               		.stabn	68,0,118,.LM5-.LFBB1
 152               	.LM5:
 153 001e 91E0      		ldi r25,lo8(1)
 154 0020 9093 0000 		sts activeDirs,r25
 119:bjarne.c      **** 		break;
 155               		.stabn	68,0,119,.LM6-.LFBB1
 156               	.LM6:
 157 0024 0895      		ret
 158               	.L11:
 159               		.stabn	68,0,122,.LM7-.LFBB1
GAS LISTING /tmp/ccPWMp4V.s 			page 6


 160               	.LM7:
 161 0026 2111      		cpse r18,__zero_reg__
 162 0028 00C0      		rjmp .L19
 163 002a 80E0      		ldi r24,0
 164               	.L19:
 165 002c 8093 0000 		sts activeDirs,r24
 166               	.L20:
  89:bjarne.c      **** 	bool answer = false;
 167               		.stabn	68,0,89,.LM8-.LFBB1
 168               	.LM8:
 169 0030 80E0      		ldi r24,0
 123:bjarne.c      **** 		break;				
 124:bjarne.c      **** 	}	
 125:bjarne.c      **** 
 126:bjarne.c      **** 	return answer;
 127:bjarne.c      **** }
 170               		.stabn	68,0,127,.LM9-.LFBB1
 171               	.LM9:
 172 0032 0895      		ret
 173               		.size	decide_if_repeated, .-decide_if_repeated
 174               		.stabs	"answer:r(5,2)",64,0,89,24
 175               		.stabn	192,0,0,.LFBB1-.LFBB1
 176               		.stabn	224,0,0,.Lscope1-.LFBB1
 177               	.Lscope1:
 178               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 179               		.stabd	78,0,0
 180               		.stabs	"update_sensor_data:F(0,47)",36,0,276,update_sensor_data
 181               	.global	update_sensor_data
 182               		.type	update_sensor_data, @function
 183               	update_sensor_data:
 184               		.stabd	46,0,0
 128:bjarne.c      **** 
 129:bjarne.c      **** void handle_messages(){
 130:bjarne.c      **** 	
 131:bjarne.c      **** 	message = 00;
 132:bjarne.c      **** 
 133:bjarne.c      **** 	uint8_t message_cpy = message;
 134:bjarne.c      **** 	
 135:bjarne.c      **** 	//plocka ut OP-koden
 136:bjarne.c      **** 	message_cpy &= 31;
 137:bjarne.c      **** 	
 138:bjarne.c      **** 	uint8_t repeated = decide_if_repeated(message_cpy);
 139:bjarne.c      **** 
 140:bjarne.c      **** 	
 141:bjarne.c      **** 	if (button_autonom == 0){ //Manuellt läge
 142:bjarne.c      **** 		if (!repeated){
 143:bjarne.c      **** 			switch(message_cpy){
 144:bjarne.c      **** 				case (0): //pil UPP trycks ner
 145:bjarne.c      **** 
 146:bjarne.c      **** 				dir_left = 1;
 147:bjarne.c      **** 				dir_right = 1;
 148:bjarne.c      **** 				spd_left = spd_left + 50;
 149:bjarne.c      **** 				spd_right = spd_right + 50;
 150:bjarne.c      **** 				break;
 151:bjarne.c      **** 				case(1): //pil UPP släpps
 152:bjarne.c      **** 				spd_left = spd_left - 50;
 153:bjarne.c      **** 				spd_right = spd_right - 50;
GAS LISTING /tmp/ccPWMp4V.s 			page 7


 154:bjarne.c      **** 				break;
 155:bjarne.c      **** 				case(2): //pil VÄNSTER trycks ner
 156:bjarne.c      **** 				spd_right = spd_right + 50;
 157:bjarne.c      **** 				break;
 158:bjarne.c      **** 				case(3): //pil VÄNSTER släpps
 159:bjarne.c      **** 				spd_right = spd_right - 50;
 160:bjarne.c      **** 				break;
 161:bjarne.c      **** 				case (4): //pil NER trycks ner
 162:bjarne.c      **** 				dir_left = 0;
 163:bjarne.c      **** 				dir_right = 0;
 164:bjarne.c      **** 				spd_left = spd_left + 50;
 165:bjarne.c      **** 				spd_right = spd_right + 50;
 166:bjarne.c      **** 				break;
 167:bjarne.c      **** 				case(5): //pil NER släpps
 168:bjarne.c      **** 				dir_left = 1;
 169:bjarne.c      **** 				dir_right = 1;
 170:bjarne.c      **** 				spd_left = spd_left - 50;
 171:bjarne.c      **** 				spd_right = spd_right - 50;
 172:bjarne.c      **** 				break;
 173:bjarne.c      **** 				case(6): //pil HÖGER trycks ner
 174:bjarne.c      **** 				spd_left = spd_left + 50;
 175:bjarne.c      **** 				break;
 176:bjarne.c      **** 				case(7): //pil HÖGER släpps
 177:bjarne.c      **** 				spd_left = spd_left - 50;
 178:bjarne.c      **** 				break;				
 179:bjarne.c      **** 			}
 180:bjarne.c      **** 		}
 181:bjarne.c      **** 		setSpeed(spd_left,spd_right,dir_left,dir_right);
 182:bjarne.c      **** 	}
 183:bjarne.c      **** 
 184:bjarne.c      **** 	switch(message_cpy){
 185:bjarne.c      **** 		
 186:bjarne.c      **** 		case (0x08):
 187:bjarne.c      **** 			//lägg lidardata i send-buffern
 188:bjarne.c      **** 			transmitByte_up(s_LIDAR_u);
 189:bjarne.c      **** 			transmitByte_up(s_LIDAR_l);
 190:bjarne.c      **** 
 191:bjarne.c      **** 		break;
 192:bjarne.c      **** 		
 193:bjarne.c      **** 		case (0x09):
 194:bjarne.c      **** 		//lägg sensordata IR höger fram-data i send-buffern
 195:bjarne.c      **** 		break;
 196:bjarne.c      **** 		
 197:bjarne.c      **** 		case (0x0A):
 198:bjarne.c      **** 		//lägg sensordata IR höger bak-data i send-buffern
 199:bjarne.c      **** 		break;
 200:bjarne.c      **** 		
 201:bjarne.c      **** 		case (0x0B):
 202:bjarne.c      **** 		//lägg sensordata IR vänster fram-data i send-buffern
 203:bjarne.c      **** 		break;
 204:bjarne.c      **** 		
 205:bjarne.c      **** 		case (0x0C):
 206:bjarne.c      **** 		//lägg sensordata IR vänster bak-data i send-buffern
 207:bjarne.c      **** 		break;
 208:bjarne.c      **** 		
 209:bjarne.c      **** 		case (0x0D):
 210:bjarne.c      **** 		//lägg gyro-data i send-buffern
GAS LISTING /tmp/ccPWMp4V.s 			page 8


 211:bjarne.c      **** 		break;
 212:bjarne.c      **** 		
 213:bjarne.c      **** 		case (0x0E):
 214:bjarne.c      **** 		//lägg reflexsensor-data i send-buffern
 215:bjarne.c      **** 		break;
 216:bjarne.c      **** 		
 217:bjarne.c      **** 		case (0x0F):
 218:bjarne.c      **** 		//lägg lidar-token i send-buffern
 219:bjarne.c      **** 		break;
 220:bjarne.c      **** 		
 221:bjarne.c      **** 		case (0x10):
 222:bjarne.c      **** 		//lägg parallell höger-token i send-buffern
 223:bjarne.c      **** 		break;
 224:bjarne.c      **** 		
 225:bjarne.c      **** 		case (0x11):
 226:bjarne.c      **** 		//lägg parallell vänster-token i send-buffern
 227:bjarne.c      **** 		break;
 228:bjarne.c      **** 		
 229:bjarne.c      **** 		case (0x12):
 230:bjarne.c      **** 		//lägg gyro-token i send-buffern
 231:bjarne.c      **** 		break;
 232:bjarne.c      **** 		
 233:bjarne.c      **** 		case (0x13):
 234:bjarne.c      **** 		//lägg vägg höger fram-token i send-buffern
 235:bjarne.c      **** 		break;
 236:bjarne.c      **** 		
 237:bjarne.c      **** 		case (0x14):
 238:bjarne.c      **** 		//lägg vägg höger bak-token i send-buffern
 239:bjarne.c      **** 		break;
 240:bjarne.c      **** 		
 241:bjarne.c      **** 		case (0x15):
 242:bjarne.c      **** 		//lägg vägg vänster fram-token i send-buffern
 243:bjarne.c      **** 		break;
 244:bjarne.c      **** 		
 245:bjarne.c      **** 		case (0x16):
 246:bjarne.c      **** 		//lägg vägg vänster bak-token i send-buffern
 247:bjarne.c      **** 		break;
 248:bjarne.c      **** 		
 249:bjarne.c      **** 		case (0x17):
 250:bjarne.c      **** 		//lägg reflex-token i send-buffern
 251:bjarne.c      **** 		break;
 252:bjarne.c      **** 		
 253:bjarne.c      **** 		case (0x18):
 254:bjarne.c      **** 		//lägg kartdata i send-buffern
 255:bjarne.c      **** 		break;
 256:bjarne.c      **** 		
 257:bjarne.c      **** 		case (0x19):
 258:bjarne.c      **** 		//senaste styrbeslut i send-buffern
 259:bjarne.c      **** 		break;
 260:bjarne.c      **** 
 261:bjarne.c      **** 		case (0x1A):
 262:bjarne.c      **** 		//pos karta X och Y i send-buffern
 263:bjarne.c      **** 		break;
 264:bjarne.c      **** 		
 265:bjarne.c      **** 		case (0x1B):
 266:bjarne.c      **** 		//pos i algoritm i send-buffern
 267:bjarne.c      **** 		break;
GAS LISTING /tmp/ccPWMp4V.s 			page 9


 268:bjarne.c      **** 		
 269:bjarne.c      **** 		case (0x1C):
 270:bjarne.c      **** 		//lägg tempKartdata i send-buffern
 271:bjarne.c      **** 		break;
 272:bjarne.c      **** 		
 273:bjarne.c      **** 	}		
 274:bjarne.c      **** }
 275:bjarne.c      **** 
 276:bjarne.c      **** void update_sensor_data(){
 185               		.stabn	68,0,276,.LM10-.LFBB2
 186               	.LM10:
 187               	.LFBB2:
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 0 */
 191               	.L__stack_usage = 0
 192 0034 0895      		ret
 193               		.size	update_sensor_data, .-update_sensor_data
 194               	.Lscope2:
 195               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 196               		.stabd	78,0,0
 197               		.stabs	"init_motors:F(0,47)",36,0,282,init_motors
 198               	.global	init_motors
 199               		.type	init_motors, @function
 200               	init_motors:
 201               		.stabd	46,0,0
 277:bjarne.c      **** 
 278:bjarne.c      **** 
 279:bjarne.c      **** 	return;
 280:bjarne.c      **** }
 281:bjarne.c      **** 
 282:bjarne.c      **** void init_motors(){
 202               		.stabn	68,0,282,.LM11-.LFBB3
 203               	.LM11:
 204               	.LFBB3:
 205               	/* prologue: function */
 206               	/* frame size = 0 */
 207               	/* stack size = 0 */
 208               	.L__stack_usage = 0
 283:bjarne.c      **** 	
 284:bjarne.c      **** 	PORTB=0x00; //Reset any output
 209               		.stabn	68,0,284,.LM12-.LFBB3
 210               	.LM12:
 211 0036 15B8      		out 0x5,__zero_reg__
 285:bjarne.c      **** 	PORTA=0x00; //Port A sets dir of motors (PA6, PA7)
 212               		.stabn	68,0,285,.LM13-.LFBB3
 213               	.LM13:
 214 0038 12B8      		out 0x2,__zero_reg__
 286:bjarne.c      **** 	DDRA |=(1 << DDA6) | (1 << DDA7);
 215               		.stabn	68,0,286,.LM14-.LFBB3
 216               	.LM14:
 217 003a 81B1      		in r24,0x1
 218 003c 806C      		ori r24,lo8(-64)
 219 003e 81B9      		out 0x1,r24
 287:bjarne.c      **** 	DDRB|=(1 << DDB6 );//set OC3A as output.
 220               		.stabn	68,0,287,.LM15-.LFBB3
 221               	.LM15:
GAS LISTING /tmp/ccPWMp4V.s 			page 10


 222 0040 269A      		sbi 0x4,6
 288:bjarne.c      **** 	DDRD|=(1 << DDD5 );//set OC1A as output.
 223               		.stabn	68,0,288,.LM16-.LFBB3
 224               	.LM16:
 225 0042 559A      		sbi 0xa,5
 289:bjarne.c      **** 	
 290:bjarne.c      **** 	//Setup timer1
 291:bjarne.c      **** 	TCCR1A |= (1 << WGM10) | (1 << WGM11) | (1 << COM1A1);
 226               		.stabn	68,0,291,.LM17-.LFBB3
 227               	.LM17:
 228 0044 E0E8      		ldi r30,lo8(-128)
 229 0046 F0E0      		ldi r31,0
 230 0048 8081      		ld r24,Z
 231 004a 8368      		ori r24,lo8(-125)
 232 004c 8083      		st Z,r24
 292:bjarne.c      **** 	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
 233               		.stabn	68,0,292,.LM18-.LFBB3
 234               	.LM18:
 235 004e E1E8      		ldi r30,lo8(-127)
 236 0050 F0E0      		ldi r31,0
 237 0052 8081      		ld r24,Z
 238 0054 8B60      		ori r24,lo8(11)
 239 0056 8083      		st Z,r24
 293:bjarne.c      **** 		
 294:bjarne.c      **** 	//Setup timer3
 295:bjarne.c      **** 	TCCR3A |= (1 << WGM30) | (1 << WGM31) | (1 << COM3A1);
 240               		.stabn	68,0,295,.LM19-.LFBB3
 241               	.LM19:
 242 0058 E0E9      		ldi r30,lo8(-112)
 243 005a F0E0      		ldi r31,0
 244 005c 8081      		ld r24,Z
 245 005e 8368      		ori r24,lo8(-125)
 246 0060 8083      		st Z,r24
 296:bjarne.c      **** 	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);
 247               		.stabn	68,0,296,.LM20-.LFBB3
 248               	.LM20:
 249 0062 E1E9      		ldi r30,lo8(-111)
 250 0064 F0E0      		ldi r31,0
 251 0066 8081      		ld r24,Z
 252 0068 8B60      		ori r24,lo8(11)
 253 006a 8083      		st Z,r24
 254 006c 0895      		ret
 255               		.size	init_motors, .-init_motors
 256               	.Lscope3:
 257               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 258               		.stabd	78,0,0
 259               		.stabs	"setSpeed:F(0,47)",36,0,299,setSpeed
 260               		.stabs	"lspeed:P(5,2)",64,0,299,24
 261               		.stabs	"rspeed:P(5,2)",64,0,299,22
 262               		.stabs	"ldir:P(5,2)",64,0,299,20
 263               		.stabs	"rdir:P(5,2)",64,0,299,18
 264               	.global	setSpeed
 265               		.type	setSpeed, @function
 266               	setSpeed:
 267               		.stabd	46,0,0
 297:bjarne.c      **** }
 298:bjarne.c      **** 
GAS LISTING /tmp/ccPWMp4V.s 			page 11


 299:bjarne.c      **** void setSpeed(uint8_t lspeed, uint8_t rspeed, uint8_t ldir , uint8_t rdir){
 268               		.stabn	68,0,299,.LM21-.LFBB4
 269               	.LM21:
 270               	.LFBB4:
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
 300:bjarne.c      **** 	
 301:bjarne.c      **** 	PORTA |= (dir_left << DDA7) | (dir_right << DDA6); //DDA7 är vänster, DDA6 är höger 	
 275               		.stabn	68,0,301,.LM22-.LFBB4
 276               	.LM22:
 277 006e 92B1      		in r25,0x2
 278 0070 4091 0000 		lds r20,dir_left
 279 0074 20E8      		ldi r18,lo8(-128)
 280 0076 429F      		mul r20,r18
 281 0078 A001      		movw r20,r0
 282 007a 1124      		clr __zero_reg__
 283 007c 2091 0000 		lds r18,dir_right
 284 0080 70E4      		ldi r23,lo8(64)
 285 0082 279F      		mul r18,r23
 286 0084 9001      		movw r18,r0
 287 0086 1124      		clr __zero_reg__
 288 0088 242B      		or r18,r20
 289 008a 292B      		or r18,r25
 290 008c 22B9      		out 0x2,r18
 302:bjarne.c      **** 	OCR1A = 10*rspeed;//set the duty cycle(out of 1023) Höger	
 291               		.stabn	68,0,302,.LM23-.LFBB4
 292               	.LM23:
 293 008e 9AE0      		ldi r25,lo8(10)
 294 0090 699F      		mul r22,r25
 295 0092 B001      		movw r22,r0
 296 0094 1124      		clr __zero_reg__
 297 0096 7093 8900 		sts 136+1,r23
 298 009a 6093 8800 		sts 136,r22
 303:bjarne.c      **** 	OCR3A = 10*lspeed;//set the duty cycle(out of 1023) Vänster
 299               		.stabn	68,0,303,.LM24-.LFBB4
 300               	.LM24:
 301 009e 2AE0      		ldi r18,lo8(10)
 302 00a0 829F      		mul r24,r18
 303 00a2 C001      		movw r24,r0
 304 00a4 1124      		clr __zero_reg__
 305 00a6 9093 9900 		sts 152+1,r25
 306 00aa 8093 9800 		sts 152,r24
 307 00ae 0895      		ret
 308               		.size	setSpeed, .-setSpeed
 309               	.Lscope4:
 310               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 311               		.stabd	78,0,0
 312               		.stabs	"handle_messages:F(0,47)",36,0,129,handle_messages
 313               	.global	handle_messages
 314               		.type	handle_messages, @function
 315               	handle_messages:
 316               		.stabd	46,0,0
 129:bjarne.c      **** void handle_messages(){
 317               		.stabn	68,0,129,.LM25-.LFBB5
 318               	.LM25:
GAS LISTING /tmp/ccPWMp4V.s 			page 12


 319               	.LFBB5:
 320               	/* prologue: function */
 321               	/* frame size = 0 */
 322               	/* stack size = 0 */
 323               	.L__stack_usage = 0
 131:bjarne.c      **** 	message = 00;
 324               		.stabn	68,0,131,.LM26-.LFBB5
 325               	.LM26:
 326 00b0 1092 0000 		sts message,__zero_reg__
 327               	.LBB6:
 328               	.LBB7:
  93:bjarne.c      **** 			answer = activeDirs	&& 1; // 1 om kommandot är repeatat annars 0
 329               		.stabn	68,0,93,.LM27-.LFBB5
 330               	.LM27:
 331 00b4 9091 0000 		lds r25,activeDirs
  94:bjarne.c      **** 			activeDirs = activeDirs || 1;
 332               		.stabn	68,0,94,.LM28-.LFBB5
 333               	.LM28:
 334 00b8 81E0      		ldi r24,lo8(1)
 335 00ba 8093 0000 		sts activeDirs,r24
 336               	.LBE7:
 337               	.LBE6:
 141:bjarne.c      **** 	if (button_autonom == 0){ //Manuellt läge
 338               		.stabn	68,0,141,.LM29-.LFBB5
 339               	.LM29:
 340 00be 2091 0000 		lds r18,button_autonom
 341 00c2 2111      		cpse r18,__zero_reg__
 342 00c4 00C0      		rjmp .L27
 142:bjarne.c      **** 		if (!repeated){
 343               		.stabn	68,0,142,.LM30-.LFBB5
 344               	.LM30:
 345 00c6 9111      		cpse r25,__zero_reg__
 346 00c8 00C0      		rjmp .L29
 146:bjarne.c      **** 				dir_left = 1;
 347               		.stabn	68,0,146,.LM31-.LFBB5
 348               	.LM31:
 349 00ca 8093 0000 		sts dir_left,r24
 147:bjarne.c      **** 				dir_right = 1;
 350               		.stabn	68,0,147,.LM32-.LFBB5
 351               	.LM32:
 352 00ce 8093 0000 		sts dir_right,r24
 148:bjarne.c      **** 				spd_left = spd_left + 50;
 353               		.stabn	68,0,148,.LM33-.LFBB5
 354               	.LM33:
 355 00d2 8091 0000 		lds r24,spd_left
 356 00d6 8E5C      		subi r24,lo8(-(50))
 357 00d8 8093 0000 		sts spd_left,r24
 149:bjarne.c      **** 				spd_right = spd_right + 50;
 358               		.stabn	68,0,149,.LM34-.LFBB5
 359               	.LM34:
 360 00dc 8091 0000 		lds r24,spd_right
 361 00e0 8E5C      		subi r24,lo8(-(50))
 362 00e2 8093 0000 		sts spd_right,r24
 363               	.L29:
 181:bjarne.c      **** 		setSpeed(spd_left,spd_right,dir_left,dir_right);
 364               		.stabn	68,0,181,.LM35-.LFBB5
 365               	.LM35:
GAS LISTING /tmp/ccPWMp4V.s 			page 13


 366 00e6 2091 0000 		lds r18,dir_right
 367 00ea 4091 0000 		lds r20,dir_left
 368 00ee 6091 0000 		lds r22,spd_right
 369 00f2 8091 0000 		lds r24,spd_left
 370 00f6 0C94 0000 		jmp setSpeed
 371               	.L27:
 372 00fa 0895      		ret
 373               		.size	handle_messages, .-handle_messages
 374               	.Lscope5:
 375               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 376               		.stabd	78,0,0
 377               		.section	.text.startup,"ax",@progbits
 378               		.stabs	"main:F(0,1)",36,0,62,main
 379               	.global	main
 380               		.type	main, @function
 381               	main:
 382               		.stabd	46,0,0
  62:bjarne.c      **** int main(){
 383               		.stabn	68,0,62,.LM36-.LFBB6
 384               	.LM36:
 385               	.LFBB6:
 386               	/* prologue: function */
 387               	/* frame size = 0 */
 388               	/* stack size = 0 */
 389               	.L__stack_usage = 0
  64:bjarne.c      **** 	init_USART_up();
 390               		.stabn	68,0,64,.LM37-.LFBB6
 391               	.LM37:
 392 0000 0E94 0000 		call init_USART_up
  65:bjarne.c      **** 	init_USART_down();
 393               		.stabn	68,0,65,.LM38-.LFBB6
 394               	.LM38:
 395 0004 0E94 0000 		call init_USART_down
  66:bjarne.c      **** 	init_motors();
 396               		.stabn	68,0,66,.LM39-.LFBB6
 397               	.LM39:
 398 0008 0E94 0000 		call init_motors
 399               	.L31:
  70:bjarne.c      **** 		handle_messages();
 400               		.stabn	68,0,70,.LM40-.LFBB6
 401               	.LM40:
 402 000c 0E94 0000 		call handle_messages
 403 0010 00C0      		rjmp .L31
 404               		.size	main, .-main
 405               	.Lscope6:
 406               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 407               		.stabd	78,0,0
 408               	.global	t_reflex_l
 409               		.section .bss
 410               		.type	t_reflex_l, @object
 411               		.size	t_reflex_l, 1
 412               	t_reflex_l:
 413 0000 00        		.zero	1
 414               	.global	t_reflex_u
 415               		.type	t_reflex_u, @object
 416               		.size	t_reflex_u, 1
 417               	t_reflex_u:
GAS LISTING /tmp/ccPWMp4V.s 			page 14


 418 0001 00        		.zero	1
 419               	.global	s_reflex
 420               		.type	s_reflex, @object
 421               		.size	s_reflex, 1
 422               	s_reflex:
 423 0002 00        		.zero	1
 424               	.global	t_gyro
 425               		.type	t_gyro, @object
 426               		.size	t_gyro, 1
 427               	t_gyro:
 428 0003 00        		.zero	1
 429               	.global	s_gyro_l
 430               		.type	s_gyro_l, @object
 431               		.size	s_gyro_l, 1
 432               	s_gyro_l:
 433 0004 00        		.zero	1
 434               	.global	s_gyro_u
 435               		.type	s_gyro_u, @object
 436               		.size	s_gyro_u, 1
 437               	s_gyro_u:
 438 0005 00        		.zero	1
 439               	.global	t_vagg_v_b
 440               		.type	t_vagg_v_b, @object
 441               		.size	t_vagg_v_b, 1
 442               	t_vagg_v_b:
 443 0006 00        		.zero	1
 444               	.global	t_vagg_v_f
 445               		.type	t_vagg_v_f, @object
 446               		.size	t_vagg_v_f, 1
 447               	t_vagg_v_f:
 448 0007 00        		.zero	1
 449               	.global	t_vagg_h_b
 450               		.type	t_vagg_h_b, @object
 451               		.size	t_vagg_h_b, 1
 452               	t_vagg_h_b:
 453 0008 00        		.zero	1
 454               	.global	t_vagg_h_f
 455               		.type	t_vagg_h_f, @object
 456               		.size	t_vagg_h_f, 1
 457               	t_vagg_h_f:
 458 0009 00        		.zero	1
 459               	.global	t_p_v
 460               		.type	t_p_v, @object
 461               		.size	t_p_v, 1
 462               	t_p_v:
 463 000a 00        		.zero	1
 464               	.global	t_p_h
 465               		.type	t_p_h, @object
 466               		.size	t_p_h, 1
 467               	t_p_h:
 468 000b 00        		.zero	1
 469               	.global	s_ir_v_b
 470               		.type	s_ir_v_b, @object
 471               		.size	s_ir_v_b, 1
 472               	s_ir_v_b:
 473 000c 00        		.zero	1
 474               	.global	s_ir_v_f
GAS LISTING /tmp/ccPWMp4V.s 			page 15


 475               		.type	s_ir_v_f, @object
 476               		.size	s_ir_v_f, 1
 477               	s_ir_v_f:
 478 000d 00        		.zero	1
 479               	.global	s_ir_h_b
 480               		.type	s_ir_h_b, @object
 481               		.size	s_ir_h_b, 1
 482               	s_ir_h_b:
 483 000e 00        		.zero	1
 484               	.global	s_ir_h_f
 485               		.type	s_ir_h_f, @object
 486               		.size	s_ir_h_f, 1
 487               	s_ir_h_f:
 488 000f 00        		.zero	1
 489               	.global	t_LIDAR
 490               		.type	t_LIDAR, @object
 491               		.size	t_LIDAR, 1
 492               	t_LIDAR:
 493 0010 00        		.zero	1
 494               	.global	s_LIDAR_l
 495               		.type	s_LIDAR_l, @object
 496               		.size	s_LIDAR_l, 1
 497               	s_LIDAR_l:
 498 0011 00        		.zero	1
 499               	.global	s_LIDAR_u
 500               		.type	s_LIDAR_u, @object
 501               		.size	s_LIDAR_u, 1
 502               	s_LIDAR_u:
 503 0012 00        		.zero	1
 504               	.global	new_message
 505               		.type	new_message, @object
 506               		.size	new_message, 1
 507               	new_message:
 508 0013 00        		.zero	1
 509               	.global	activeDirs
 510               		.type	activeDirs, @object
 511               		.size	activeDirs, 1
 512               	activeDirs:
 513 0014 00        		.zero	1
 514               	.global	message
 515               		.data
 516               		.type	message, @object
 517               		.size	message, 1
 518               	message:
 519 0000 01        		.byte	1
 520               	.global	button_autonom
 521               		.section .bss
 522               		.type	button_autonom, @object
 523               		.size	button_autonom, 1
 524               	button_autonom:
 525 0015 00        		.zero	1
 526               	.global	spd_right
 527               		.type	spd_right, @object
 528               		.size	spd_right, 1
 529               	spd_right:
 530 0016 00        		.zero	1
 531               	.global	spd_left
GAS LISTING /tmp/ccPWMp4V.s 			page 16


 532               		.type	spd_left, @object
 533               		.size	spd_left, 1
 534               	spd_left:
 535 0017 00        		.zero	1
 536               	.global	dir_right
 537               		.data
 538               		.type	dir_right, @object
 539               		.size	dir_right, 1
 540               	dir_right:
 541 0001 01        		.byte	1
 542               	.global	dir_left
 543               		.type	dir_left, @object
 544               		.size	dir_left, 1
 545               	dir_left:
 546 0002 01        		.byte	1
 547               		.stabs	"dir_left:G(5,2)",32,0,19,0
 548               		.stabs	"dir_right:G(5,2)",32,0,20,0
 549               		.stabs	"spd_left:G(5,2)",32,0,21,0
 550               		.stabs	"spd_right:G(5,2)",32,0,22,0
 551               		.stabs	"button_autonom:G(5,2)",32,0,23,0
 552               		.stabs	"message:G(5,2)",32,0,24,0
 553               		.stabs	"activeDirs:G(5,2)",32,0,25,0
 554               		.stabs	"new_message:G(5,2)",32,0,26,0
 555               		.stabs	"s_LIDAR_u:G(5,2)",32,0,34,0
 556               		.stabs	"s_LIDAR_l:G(5,2)",32,0,35,0
 557               		.stabs	"t_LIDAR:G(5,2)",32,0,36,0
 558               		.stabs	"s_ir_h_f:G(5,2)",32,0,38,0
 559               		.stabs	"s_ir_h_b:G(5,2)",32,0,39,0
 560               		.stabs	"s_ir_v_f:G(5,2)",32,0,40,0
 561               		.stabs	"s_ir_v_b:G(5,2)",32,0,41,0
 562               		.stabs	"t_p_h:G(5,2)",32,0,45,0
 563               		.stabs	"t_p_v:G(5,2)",32,0,46,0
 564               		.stabs	"t_vagg_h_f:G(5,2)",32,0,48,0
 565               		.stabs	"t_vagg_h_b:G(5,2)",32,0,49,0
 566               		.stabs	"t_vagg_v_f:G(5,2)",32,0,50,0
 567               		.stabs	"t_vagg_v_b:G(5,2)",32,0,51,0
 568               		.stabs	"s_gyro_u:G(5,2)",32,0,53,0
 569               		.stabs	"s_gyro_l:G(5,2)",32,0,54,0
 570               		.stabs	"t_gyro:G(5,2)",32,0,55,0
 571               		.stabs	"s_reflex:G(5,2)",32,0,57,0
 572               		.stabs	"t_reflex_u:G(5,2)",32,0,58,0
 573               		.stabs	"t_reflex_l:G(5,2)",32,0,59,0
 574               		.text
 575               		.stabs	"",100,0,0,.Letext0
 576               	.Letext0:
 577               		.ident	"GCC: (GNU) 4.8.2"
 578               	.global __do_copy_data
 579               	.global __do_clear_bss
GAS LISTING /tmp/ccPWMp4V.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bjarne.c
     /tmp/ccPWMp4V.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccPWMp4V.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccPWMp4V.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccPWMp4V.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccPWMp4V.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccPWMp4V.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccPWMp4V.s:107    .text:0000000000000000 decide_if_repeated
     /tmp/ccPWMp4V.s:512    .bss:0000000000000014 activeDirs
     /tmp/ccPWMp4V.s:183    .text:0000000000000034 update_sensor_data
     /tmp/ccPWMp4V.s:200    .text:0000000000000036 init_motors
     /tmp/ccPWMp4V.s:266    .text:000000000000006e setSpeed
     /tmp/ccPWMp4V.s:545    .data:0000000000000002 dir_left
     /tmp/ccPWMp4V.s:540    .data:0000000000000001 dir_right
     /tmp/ccPWMp4V.s:315    .text:00000000000000b0 handle_messages
     /tmp/ccPWMp4V.s:518    .data:0000000000000000 message
     /tmp/ccPWMp4V.s:524    .bss:0000000000000015 button_autonom
     /tmp/ccPWMp4V.s:534    .bss:0000000000000017 spd_left
     /tmp/ccPWMp4V.s:529    .bss:0000000000000016 spd_right
     /tmp/ccPWMp4V.s:381    .text.startup:0000000000000000 main
     /tmp/ccPWMp4V.s:412    .bss:0000000000000000 t_reflex_l
     /tmp/ccPWMp4V.s:417    .bss:0000000000000001 t_reflex_u
     /tmp/ccPWMp4V.s:422    .bss:0000000000000002 s_reflex
     /tmp/ccPWMp4V.s:427    .bss:0000000000000003 t_gyro
     /tmp/ccPWMp4V.s:432    .bss:0000000000000004 s_gyro_l
     /tmp/ccPWMp4V.s:437    .bss:0000000000000005 s_gyro_u
     /tmp/ccPWMp4V.s:442    .bss:0000000000000006 t_vagg_v_b
     /tmp/ccPWMp4V.s:447    .bss:0000000000000007 t_vagg_v_f
     /tmp/ccPWMp4V.s:452    .bss:0000000000000008 t_vagg_h_b
     /tmp/ccPWMp4V.s:457    .bss:0000000000000009 t_vagg_h_f
     /tmp/ccPWMp4V.s:462    .bss:000000000000000a t_p_v
     /tmp/ccPWMp4V.s:467    .bss:000000000000000b t_p_h
     /tmp/ccPWMp4V.s:472    .bss:000000000000000c s_ir_v_b
     /tmp/ccPWMp4V.s:477    .bss:000000000000000d s_ir_v_f
     /tmp/ccPWMp4V.s:482    .bss:000000000000000e s_ir_h_b
     /tmp/ccPWMp4V.s:487    .bss:000000000000000f s_ir_h_f
     /tmp/ccPWMp4V.s:492    .bss:0000000000000010 t_LIDAR
     /tmp/ccPWMp4V.s:497    .bss:0000000000000011 s_LIDAR_l
     /tmp/ccPWMp4V.s:502    .bss:0000000000000012 s_LIDAR_u
     /tmp/ccPWMp4V.s:507    .bss:0000000000000013 new_message

UNDEFINED SYMBOLS
__tablejump2__
init_USART_up
init_USART_down
__do_copy_data
__do_clear_bss
